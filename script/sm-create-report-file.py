#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standard library imports
import decimal
import json
import re
import sys

# Third party imports
import jsonschema
import tabulate

# Project imports
import cjm
import cjm.cfg
import cjm.codes
import cjm.commitment
import cjm.issue
import cjm.schema
import cjm.sprint
import cjm.team


def parse_options(args):
    defaults = cjm.cfg.load_defaults()
    parser = cjm.cfg.make_common_parser(defaults)

    parser.add_argument(
        "sprint_file", action="store",
        help=(
            "Path to the json sprint data file as generated by the {0:s} script and described by"
            " the {1:s} schema"
            "".format(cjm.SM_CREATE_SPRINT_FILE, cjm.schema.make_subpath("sprint.json"))))

    parser.add_argument(
        "team_file", action="store",
        help=(
            "Path to the json team data file as generated by the {0:s} script and described by"
            " the {1:s} schema"
            "".format(cjm.SM_CREATE_TEAM_FILE, cjm.schema.make_subpath("team.json"))))

    parser.add_argument(
        "commitment_file", action="store",
        help=(
            "Path to the json commitment data file as generated by the {0:s} script and described"
            " by the {1:s} schema"
            "".format(cjm.SM_CREATE_COMMITMENT_FILE, cjm.schema.make_subpath("commitment.json"))))

    return parser.parse_args(args)


def main(options):
    cfg = cjm.cfg.apply_options(cjm.cfg.init_defaults(), options)
    cfg["issue"]["include unassigned"] = True

    # Load sprint data:

    try:
        with open(options.sprint_file) as sprint_file:
            sprint_data = cjm.sprint.load_data(cfg, sprint_file)
    except IOError as e:
        sys.stderr.write(
            "ERROR: Sprint data file ('{0:s}') I/O error\n".format(options.sprint_file))
        sys.stderr.write("    {0}\n".format(e))
        return cjm.codes.FILESYSTEM_ERROR

    cfg["sprint"]["id"] = sprint_data.get("id")
    cfg["project"]["key"] = sprint_data["project"]["key"]

    if cfg["sprint"]["id"] is None:
        sys.stderr.write(
            "ERROR: The sprint id is not specified by the sprint data file ('{0:s}')\n"
            "".format(options.sprint_file))
        return cjm.codes.CONFIGURATION_ERROR

    # Load team data:

    try:
        with open(options.team_file) as team_file:
            team_data = cjm.team.load_data(cfg, team_file)
    except IOError as e:
        sys.stderr.write(
            "ERROR: Team data file ('{0:s}') I/O error\n".format(options.team_file))
        sys.stderr.write("    {0}\n".format(e))
        return cjm.codes.FILESYSTEM_ERROR

    # Load commitment data:

    try:
        with open(options.commitment_file) as commitment_file:
            commitment_data = cjm.commitment.load_data(cfg, commitment_file)
    except IOError as e:
        sys.stderr.write(
            "ERROR: Commitment data file ('{0:s}') I/O error\n".format(options.commitment_file))
        sys.stderr.write("    {0}\n".format(e))
        return cjm.codes.FILESYSTEM_ERROR

    # Determine the story points field id:

    if cfg["jira"]["fields"]["story points"] is None:
        result_code, field_id = cjm.issue.detect_story_point_field_id(cfg)
        if result_code:
            return result_code
        cfg["jira"]["fields"]["story points"] = field_id

    # Request all committed issues:

    result_code, issues_com = cjm.issue.request_issues_by_keys(
        cfg, [i["key"] for i in commitment_data["issues"]])

    if result_code:
        return result_code

    for issue in issues_com:
        issue["story points"] = int(issue["story points"])
        issue["committed story points"] = issue["story points"]
        issue["total story points"] = issue["story points"]

        issue_lut = dict((i["id"], i) for i in issues_com)

    # Request all extension issues and determine their commitment vs total story points:

    result_code, issues_ext = cjm.sprint.request_issues_by_comment(
        cfg, "{0:s}/Extended".format(sprint_data["comment prefix"]))

    if result_code:
        return result_code

    for issue in issues_ext:
        if issue["id"] in issue_lut:
            sys.stderr.write(
                "WARNING: Issue '{0:s}' was found in the commitment data file and at the same"
                " time it was found out to be marked with sprint extension comment. The comment"
                " will be ignored\n".format(issue["key"]))
            continue

        issue["story points"] = int(issue["story points"])

        re2 = re.compile(
            r"{0:s}/Extended \((?P<committed>[0-9]+)/(?P<total>[0-9]+)\)"
            "".format(re.escape(sprint_data["comment prefix"])))
        result_code, comments = cjm.issue.request_issue_comments_by_regexp(
            cfg, issue["key"], re2)

        if result_code:
            return result_code
        if not comments:
            issue["committed story points"] = 0
            issue["total story points"] = issue["story points"]
        else:
            if len(set(comments)) > 1:
                sys.stderr.write(
                    "WARNING: Issue '{0:s}' has more than one sprint extension comment. Only the"
                    " first meaningful one will be used. Delete all erroneous comments for the"
                    " sprint '{1:s}'\n".format(issue["key"], sprint_data["comment prefix"]))
            sp_committed = int(comments[0].group("committed"))
            sp_total = int(comments[0].group("total"))
            if sp_total != issue["story points"]:
                sys.stderr.write(
                    "WARNING: Regarding issue {0:s}: Story point value inconsistency between the"
                    " story points field ({1:d}) and the sprint extension comment ({2:d}). The"
                    " value taken from the story points field will be used for reporting purposes"
                    " and the committed value will be assumed to be 0\n"
                    "".format(issue["key"], issue["story points"], sp_total))
                issue["committed story points"] = 0
                issue["total story points"] = issue["story points"]
            elif sp_committed > sp_total:
                sys.stderr.write(
                    "WARNING: Regarding issue {0:s}: According to the sprint extension comment,"
                    " the number of committed story points ({1:d}) is greater than the total"
                    " number of deliverable story points ({2:d}). The total number of story points"
                    " will be used in both cases\n"
                    "".format(issue["key"], sp_committed, sp_total))
                issue["committed story points"] = sp_total
                issue["total story points"] = sp_total
            else:
                issue["committed story points"] = sp_committed
                issue["total story points"] = sp_total

    issues_team = cjm.team.filter_team_issues(cfg, issues_ext, team_data)
    issues_new = [i for i in issues_team if i["id"] not in issue_lut]

    issues = sorted(issues_com + issues_new, key=lambda i: i["id"])

    total_committed = sum([i["committed story points"] for i in issues])
    total_delivered = sum([i["total story points"] for i in issues if i["status"] == "Done"])
    delivery_ratio = decimal.Decimal(total_delivered) / decimal.Decimal(total_committed)
    delivery_ratio = delivery_ratio.quantize(decimal.Decimal(".0000"), decimal.ROUND_HALF_UP)

    report = {
        "issues": issues,
        "total": {
            "committed": total_committed,
            "delivered": total_delivered
        },
        "ratio": str(delivery_ratio)
    }

#    commitment_schema = cjm.schema.load(cfg, "commitment.json")
#    jsonschema.validate(commitment, commitment_schema)

    if options.json_output:
        print(json.dumps(report, indent=4, sort_keys=False))
    else:
        person_lut = dict((p["account id"], p) for p in team_data["people"])
        def __fmt_assignee(issue):
            if issue["assignee id"] is None:
                return ""
            else:
                return "{0:s}, {1:s}".format(
                    person_lut[issue["assignee id"]]["last name"],
                    person_lut[issue["assignee id"]]["first name"])

        print(tabulate.tabulate(
            [(i["id"], i["key"], i["summary"], __fmt_assignee(i),
              i["committed story points"], i["total story points"], i["status"])
             for i in issues],
            headers=["Id", "Key", "Summary", "Assignee", "Committed", "Total", "Status"],
            tablefmt="orgtbl"))

    return cjm.codes.NO_ERROR


if __name__ == '__main__':
    sys.exit(main(parse_options(sys.argv[1:])))
