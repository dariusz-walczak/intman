#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Push comments indicating that given issues are committed"""

# Standard library imports
import sys

# Third party imports
import tabulate

# Project imports
import cjm.cfg
import cjm.issue
import cjm.schema
import cjm.codes
import cjm.sprint
import cjm.commitment
import cjm.request


_COMMITMENT_PREFIX_ARG_NAME = "--prefix"


def parse_options(args):
    """Parse command line options"""
    defaults = cjm.cfg.load_defaults()
    parser = cjm.cfg.make_common_parser(defaults)

    default_commitment_prefix = ""  # defaults.get("project", {}).get("key")

    parser.add_argument(
        _COMMITMENT_PREFIX_ARG_NAME, action="store", metavar="KEY", dest="commitment_prefix",
        default=default_commitment_prefix,
        help=(
            "Prefix to which the empty comment prefix will be changed{0:s}"
            "".format(cjm.cfg.fmt_dft(default_commitment_prefix))))

    parser.add_argument(
        "sprint_file", action="store",
        help=(
            "Path to the json sprint data file as generated by the {0:s} script and described by"
            " the {1:s} schema"
            "".format(cjm.SM_CREATE_SPRINT_FILE, cjm.schema.make_subpath("sprint.json"))))

    parser.add_argument(
        "commitment_file", action="store",
        help=(
            "Path to the json commitment data file as generated by the {0:s} script and described"
            " by the {1:s} schema"
            "".format(cjm.SM_CREATE_COMMITMENT_FILE, cjm.schema.make_subpath("commitment.json"))))

    parser.add_argument(
        "--preview", action="store_true", dest="preview",
        help="Dont push comments but print whats about to happen to std output")

    return parser.parse_args(args)


def main(options):
    """Entry function"""
    cfg = cjm.cfg.apply_options(cjm.cfg.init_defaults(), options)
    cfg["issue"]["include unassigned"] = True

    # Load sprint data:

    sprint_data = cjm.data.load(cfg, options.sprint_file, "sprint.json")

    cfg["sprint"]["id"] = sprint_data.get("id")
    cfg["project"]["key"] = sprint_data["project"]["key"]

    if cfg["sprint"]["id"] is None:
        sys.stderr.write(
            "ERROR: The sprint id is not specified by the sprint data file ('{0:s}')\n"
            "".format(options.sprint_file))
        return cjm.codes.CONFIGURATION_ERROR


    commitment_data = cjm.data.load(cfg, options.commitment_file, "commitment.json")


    comment_to_be_added = sprint_data["comment prefix"] + "/Committed"

    # Retrieve all issues with the commitment comment added:
    all_issues_with_comments = cjm.sprint.request_issues_by_comment(cfg, comment_to_be_added)

    commitment_issues = commitment_data["issues"]

    ids_commitment_issues = set([issue["id"] for issue in commitment_issues])
    ids_all_issues_with_comments = set([issue["id"] for issue in all_issues_with_comments])
    ids_issues_without_comments = ids_commitment_issues - ids_all_issues_with_comments

    if options.preview:
        print(tabulate.tabulate(
            [(i["id"], i["key"], i["summary"], comment_to_be_added)
             for i in commitment_issues
             if i["id"] in ids_issues_without_comments],
            headers=["Id", "Key", "Summary", "Comment to be added"], tablefmt="orgtbl"))
        return 0

    for issue in commitment_issues:
        if issue["id"] in ids_issues_without_comments:
            comment_url = cjm.request.make_cj_url(cfg, "issue", str(issue["id"]), "comment")
            body = cjm.issue.make_comment_body(comment_to_be_added)

            if options.verbose:
                print(f"Posting '{comment_to_be_added}' to issue {issue['key']}")

            cjm.request.make_cj_post_request(cfg, comment_url, body)

    return cjm.codes.NO_ERROR


if __name__ == "__main__":
    try:
        exit(main(parse_options(sys.argv[1:])))
    except cjm.codes.CjmError as e:
        exit(e.code)
