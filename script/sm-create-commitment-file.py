#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standard library imports
import json
import sys

# Third party imports
import jsonschema
import tabulate

# Project imports
import cjm
import cjm.cfg
import cjm.codes
import cjm.issue
import cjm.request
import cjm.schema
import cjm.sprint
import cjm.team

SPRINT_ARG_NAME = "--by-sprint"
COMMENT_ARG_NAME = "--by-comment"


def parse_options(args):
    defaults = cjm.cfg.load_defaults()
    parser = cjm.cfg.make_common_parser(defaults)

    parser.add_argument(
        "sprint_file", action="store",
        help=(
            "Path to the json sprint data file as generated by the {0:s} script and described by"
            " the {1:s} schema"
            "".format(cjm.SM_CREATE_SPRINT_FILE, cjm.schema.make_subpath("sprint.json"))))

    parser.add_argument(
        "team_file", action="store",
        help=(
            "Path to the json team data file as generated by the {0:s} script and described by"
            " the {1:s} schema"
            "".format(cjm.SM_CREATE_TEAM_FILE, cjm.schema.make_subpath("team.json"))))

    parser.add_argument(
        SPRINT_ARG_NAME, action="store_true", dest="by_sprint_flag",
        help=(
            "Select issues associated with the given sprint. Can be combined with '{0:s}' flag"
            "".format(COMMENT_ARG_NAME)))
    parser.add_argument(
        COMMENT_ARG_NAME, action="store_true", dest="by_comment_flag",
        help=(
            "Select issues with the commitment comment added. Can be combined with '{0:s}' flag"
            "".format(SPRINT_ARG_NAME)))
    parser.add_argument(
        "--include-unassigned", action="store_true", dest="include_unassigned", default=False,
        help="Include unassigned issues in the issue list")

    return parser.parse_args(args)


def determine_person_summary(person_data, commitment_data):
    issues = [
        i for i in commitment_data["issues"]
        if i["assignee id"] == person_data["account id"]]

    return {
        "story points": sum([int(i["story points"]) for i in issues])
    }


def main(options):
    cfg = cjm.cfg.apply_options(cjm.cfg.init_defaults(), options)
    cfg["issue"]["include unassigned"] = options.include_unassigned

    # Load sprint data:

    sprint_data = cjm.data.load(cfg, options.sprint_file, "sprint.json")

    cfg["sprint"]["id"] = sprint_data.get("id")
    cfg["project"]["key"] = sprint_data["project"]["key"]

    if cfg["sprint"]["id"] is None:
        sys.stderr.write(
            "ERROR: The sprint id is not specified by the sprint data file ('{0:s}')\n"
            "".format(options.sprint_file))
        return cjm.codes.CONFIGURATION_ERROR

    # Load team data:

    team_data = cjm.data.load(cfg, options.team_file, "team.json")

    # Determine the story points field id:

    if cfg["jira"]["fields"]["story points"] is None:
        cfg["jira"]["fields"]["story points"] = cjm.issue.detect_story_point_field_id(cfg)

    # Retrieve issues assigned to the sprint:

    issues_all = cjm.sprint.request_issues_by_sprint(cfg)
    issues_team = cjm.team.filter_team_issues(cfg, issues_all, team_data)

    for issue in issues_team:
        issue["by sprint"] = True
        issue["by comment"] = False

    total_sp = sum([int(i["story points"]) for i in issues_team if i["story points"] is not None])
    issue_lut = dict((i["id"], i) for i in issues_team)

    # Retrieve issues with the commitment comment added:

    issues_all = cjm.sprint.request_issues_by_comment(
        cfg, "{0:s}/Committed".format(sprint_data["comment prefix"]))
    issues_team = cjm.team.filter_team_issues(cfg, issues_all, team_data)

    for issue in issues_team:
        issue_id = issue["id"]
        if issue_id in issue_lut:
            issue_lut[issue_id]["by comment"] = True
        else:
            issue_lut[issue_id] = issue
            issue_lut[issue_id]["by sprint"] = False
            issue_lut[issue_id]["by comment"] = True

    issue_lut.update(dict((i["id"], i) for i in issues_team if i["id"] not in issue_lut))

    issues = [issue_lut[k] for k in sorted(issue_lut.keys())]

    commitment = {"total": {"committed": total_sp}, "issues": issues}

    commitment_schema = cjm.schema.load(cfg, "commitment.json")
    jsonschema.validate(commitment, commitment_schema)

    if options.json_output:
        print(json.dumps(commitment, indent=4, sort_keys=False))
    else:
        person_lut = dict((p["account id"], p) for p in team_data["people"])

        def __fmt_assignee(issue):
            if issue["assignee id"] is None:
                return ""
            else:
                return cjm.team.format_full_name(person_lut[issue["assignee id"]])

        print(tabulate.tabulate(
            [(i["id"], i["key"], i["summary"], __fmt_assignee(i), i["story points"],
              "Sprint" if i["by sprint"] else "",
              "Comment" if i["by comment"] else "")
             for i in issues],
            headers=["Id", "Key", "Summary", "Assignee", "Story Points", "Sprint", "Comment"],
            tablefmt="orgtbl"))

        print(tabulate.tabulate(
            [(cjm.team.format_full_name(p), determine_person_summary(p, commitment)["story points"])
             for p in team_data["people"]],
            ["Full Name", "Story Points"],
            tablefmt="orgtbl"))

    return cjm.codes.NO_ERROR


if __name__ == '__main__':
    try:
        sys.exit(main(parse_options(sys.argv[1:])))
    except cjm.codes.CjmError as e:
        exit(e.code)
