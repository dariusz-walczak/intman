#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standard library imports
import sys
import json

# Third party imports
import jsonschema
import tabulate

# Project imports
import cjm
import cjm.cfg
import cjm.issue
import cjm.request
import cjm.schema
import cjm.sprint
import cjm.team
import cjm.codes

SPRINT_ARG_NAME = "--by-sprint"
COMMENT_ARG_NAME = "--by-comment"


def parse_options(args):
    defaults = cjm.cfg.load_defaults()
    parser = cjm.cfg.make_common_parser(defaults)

    parser.add_argument(
        "sprint_file", action="store",
        help=(
            "Path to the json sprint data file as generated by the {0:s} script and described by"
            " the {1:s} schema"
            "".format(cjm.SM_CREATE_SPRINT_FILE, cjm.schema.make_subpath("sprint.json"))))

    parser.add_argument(
        "team_file", action="store",
        help=(
            "Path to the json team data file as generated by the {0:s} script and described by"
            " the {1:s} schema"
            "".format(cjm.SM_CREATE_TEAM_FILE, cjm.schema.make_subpath("team.json"))))

    parser.add_argument(
        SPRINT_ARG_NAME, action="store_true", dest="by_sprint_flag",
        help=(
            "Select issues associated with the given sprint. Can be combined with '{0:s}' flag"
            "".format(COMMENT_ARG_NAME)))
    parser.add_argument(
        COMMENT_ARG_NAME, action="store_true", dest="by_comment_flag",
        help=(
            "Select issues with the commitment comment added. Can be combined with '{0:s}' flag"
            "".format(SPRINT_ARG_NAME)))
    parser.add_argument(
        "--include-unassigned", action="store_true", dest="include_unassigned", default=False,
        help="Include unassigned issues in the issue list")

    parser.add_argument(
        ODT_FILE_ARG_NAME, action="store_true", dest="odt_file_output",
        help="Output data in .odt file format.")

    return parser.parse_args(args)


def main(options):
    cfg = cjm.cfg.apply_options(cjm.cfg.init_defaults(), options)

    try:
        with open(options.sprint_file) as sprint_file:
            sprint_data = cjm.sprint.load_data(cfg, sprint_file)
    except IOError as e:
        sys.stderr.write(
            "ERROR: Sprint data file ('{0:s}') I/O error\n".format(options.sprint_file))
        sys.stderr.write("    {0}\n".format(e))
        return cjm.codes.FILESYSTEM_ERROR

    cfg["sprint"]["id"] = sprint_data.get("id")
    cfg["project"]["key"] = sprint_data["project"]["key"]

    if cfg["sprint"]["id"] is None:
        sys.stderr.write(
            "ERROR: The sprint id is not specified by the sprint data file ('{0:s}')\n"
            "".format(options.sprint_file))
        return cjm.codes.CONFIGURATION_ERROR

    try:
        with open(options.team_file) as team_file:
            team_data = cjm.team.load_data(cfg, team_file)
    except IOError as e:
        sys.stderr.write(
            "ERROR: Team data file ('{0:s}') I/O error\n".format(options.team_file))
        sys.stderr.write("    {0}\n".format(e))
        return cjm.codes.FILESYSTEM_ERROR

    if cfg["jira"]["fields"]["story points"] is None:
        result_code, field_id = cjm.issue.detect_story_point_field_id(cfg)
        if result_code:
            return result_code
        cfg["jira"]["fields"]["story points"] = field_id

    valid_account_id_list = (
        [r["account id"] for r in team_data["people"]] +
        [None] if options.include_unassigned else [])

    # Retrieve issues assigned to the sprint:

    result_code, issues_all = cjm.sprint.request_issues_by_sprint(cfg)

    if result_code:
        return result_code

    issues_team = [i for i in issues_all if i["assignee id"] in valid_account_id_list]
    for issue in issues_team:
        issue["by sprint"] = True
        issue["by comment"] = False

    issue_lut = dict((i["id"], i) for i in issues_team)

    # Retrieve issues with the commitment comment added:

    result_code, issues_all = cjm.sprint.request_issues_by_comment(
        cfg, "{0:s}/Committed".format(sprint_data["comment prefix"]))

    if result_code:
        return result_code

    issues_team = [i for i in issues_all if i["assignee id"] in valid_account_id_list]

    for issue in issues_team:
        issue_id = issue["id"]
        if issue_id in issue_lut:
            issue_lut[issue_id]["by comment"] = True
        else:
            issue_lut[issue_id] = issue
            issue_lut[issue_id]["by sprint"] = False
            issue_lut[issue_id]["by comment"] = True

    issue_lut.update(dict((i["id"], i) for i in issues_team if i["id"] not in issue_lut))

    issues = [issue_lut[k] for k in sorted(issue_lut.keys())]

    commitment = {"issues": issues}

    commitment_schema = cjm.schema.load(cfg, "commitment.json")
    jsonschema.validate(commitment, commitment_schema)

    if options.json_output:
        print(json.dumps(commitment, indent=4, sort_keys=False))
    else:
        person_lut = dict((p["account id"], p) for p in team_data["people"])
        def __fmt_assignee(issue):
            if issue["assignee id"] is None:
                return ""
            else:
                return "{0:s}, {1:s}".format(
                    person_lut[issue["assignee id"]]["last name"],
                    person_lut[issue["assignee id"]]["first name"])

        print(tabulate.tabulate(
            [(i["id"], i["key"], i["summary"], __fmt_assignee(i), i["story points"],
              "Sprint" if i["by sprint"] else "",
              "Comment" if i["by comment"] else "")
             for i in issues],
            headers=["Id", "Key", "Summary", "Assignee", "Story Points", "Sprint", "Comment"],
            tablefmt="orgtbl"))

    return cjm.codes.NO_ERROR


if __name__ == '__main__':
    sys.exit(main(parse_options(sys.argv[1:])))
