#!/usr/bin/env python3

# Standard library imports
import sys

# Third party imports
import simplejson
import tabulate

# Project imports
import cjm
import cjm.cfg
import cjm.request
import cjm.schema
import cjm.sprint


SPRINT_ARG_NAME = "--by-sprint"
COMMENT_ARG_NAME = "--by-comment"


def parse_options(args):
    defaults = cjm.cfg.load_defaults()
    parser = cjm.cfg.make_common_parser(defaults)

    parser.add_argument(
        "sprint_file", action="store",
        help=(
            "Path to the json sprint data file path as generated by the {0:s} script and described"
            " by the {1:s} schema"
            "".format(cjm.SM_CREATE_SPRINT_FILE, cjm.schema.make_subpath("sprint.json"))))

    parser.add_argument(
        SPRINT_ARG_NAME, action="store_true", dest="by_sprint_flag",
        help=(
            "Select issues associated with the given sprint. Can be conbined with '{0:s}' flag"
            "".format(COMMENT_ARG_NAME)))
    parser.add_argument(
        COMMENT_ARG_NAME, action="store_true", dest="by_comment_flag",
        help=(
            "Select issues with the commitment comment added. Can be conbined with '{0:s}' flag"
            "".format(SPRINT_ARG_NAME)))

    return parser.parse_args(args)


def main(options):
    cfg = cjm.cfg.apply_options(cjm.cfg.init_defaults(), options)

    try:
        with open(options.sprint_file) as sprint_file:
            sprint_data = cjm.sprint.load_data(cfg, sprint_file)
    except IOError as e:
        sys.stderr.write(
            "ERROR: Sprint data file ('{0:s}') I/O error\n".format(options.sprint_file))
        sys.stderr.write("    {0}\n".format(e))
        return cjm.codes.FILESYSTEM_ERROR

    cfg["sprint"]["id"] = sprint_data.get("id")

    if cfg["sprint"]["id"] is None:
        sys.stderr.write(
            "ERROR: The sprint id is not specified by the sprint data file ('{0:s}')\n"
            "".format(options.sprint_file))
        return cjm.codes.CONFIGURATION_ERROR

    result_code, issues = cjm.sprint.request_issues_by_sprint(cfg)

    if result_code:
        return result_code

    if options.json_output:
        print(simplejson.dumps(issues, indent=4, sort_keys=False))
    else:
        print(tabulate.tabulate(
            [(i["id"], i["key"], i["summary"]) for i in issues],
            headers=["Id", "Key", "Summary"], tablefmt="orgtbl"))

    import pdb; pdb.set_trace()

    return cjm.codes.NO_ERROR;


if __name__ == '__main__':
    sys.exit(main(parse_options(sys.argv[1:])))
